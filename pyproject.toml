[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[project]
name = "pybrowsers-profiles"
dynamic = ["version"]
description = "Simple script for manage browser's profiles."
readme = { file = "README.md", content-type = "text/markdown" }
keywords = ["dmenu", "firefox", "librewolf", "profiles", "rofi"]
license = { file = "LICENSE.txt" }
authors = [{ name = "haaag", email = "git.haaag@gmail.com" }]
requires-python = ">=3.8"
classifiers = [
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
]
dependencies = ["pyselector>=0.0.25"]
[project.urls]
"Homepage" = "https://github.com/haaag/PyBrowsers-Profiles"
"Bug Tracker" = "https://github.com/haaag/PyBrowsers-Profiles/issues"

[project.scripts]
pybrowsers = "pybrowsers:__main__.main"

[tool.hatch.build.targets.sdist]
exclude = ["assets", "dist"]

[tool.hatch.build.targets.wheel]
packages = ["pybrowsers/"]

[tool.hatch.version]
path = "pybrowsers/__init__.py"

[tool.mypy]
show_error_codes = true
show_error_context = true
show_column_numbers = true
ignore_missing_imports = true
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
warn_redundant_casts = true
warn_unused_ignores = true

[tool.ruff]
fix = false
line-length = 99
output-format = "grouped"
show-fixes = true
target-version = "py38"
exclude = [".venv", ".mypy_cache", ".pytest_cache"]

[tool.ruff.format]
quote-style = "single"
line-ending = "auto"
skip-magic-trailing-comma = false
docstring-code-format = true

[tool.ruff.lint]
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
task-tags = ["HACK", "FIX", "BUG", "WIP", "TODO"]
extend-select = [
  "B",   # (flake8-bugbear)
  "BLE", # (flake8-blind-except)
  "C4",  # (flake8-comprehensions)
  # "ERA",  # (eradicate)
  "I",   # (isort)
  "ICN", # (flake8-import-conventions)
  "INP", # (flake8-no-pep420)
  "ISC", # (flake8-implicit-str-concat)
  "N",   # (pep8-naming)
  "NPY", # (numpy-specific-rules)
  "PGH", # (pygrep-hooks)
  "PIE", # (flake8-pie)
  "PTH", # (flake8-use-pathlib)
  "Q",   # (flake8-quotes)
  "RET", # (flake8-return)
  "RSE", # (flake8-raise)
  "RUF", # (ruff-specific-rules)
  "S",   # (flake8-bandit)
  "SIM", # (flake8-simplify)
  # "T20",  # (flake8-print)
  "TCH", # (flake8-type-checking)
  "TID", # (flake8-tidy-imports)
  "YTT", # (flake8-2020)
]

[tool.ruff.lint.isort]
force-single-line = true
order-by-type = true
required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.per-file-ignores]
# Single-quote preferred
"**/*" = ["Q000", "S603"]
